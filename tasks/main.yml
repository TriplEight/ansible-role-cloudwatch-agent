---
- name: Load var file with package URL based on the OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        # The OS family and distribution for Kali is "Kali GNU/Linux",
        # which is not an allowable file name in Linux due to the
        # slash.  We will allow Kali to fall through and use the
        # Debian vars file.
        - Debian.yml
      paths:
        - "{{ role_path }}/vars"

- name: Load tasks file with install tasks based on the OS type
  include: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - install_{{ ansible_distribution }}.yml
        - install_{{ ansible_os_family }}.yml
        # The OS family and distribution for Kali is "Kali GNU/Linux",
        # which is not an allowable file name in Linux due to the
        # slash.  We will allow Kali to fall through and use the
        # Debian install tasks file.
        - install_Debian.yml
      paths:
        - "{{ role_path }}/tasks"

# Note that we are using a single config file for all instances,
# regardless of Linux distribution.  This means that the config file
# may well (and most likely does) reference log files that do not
# exist on all instances.
- name: Copy over CloudWatch Agent configuration
  copy:
    src: amazon-cloudwatch-agent.json
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    mode: 0600

# The AWS CloudWatch Agent systemd unit kicks off a process that
# starts the CloudWatch Agent and then dies.  Therefore we can't start
# it here because it will be started again during the idempotence test
# and therefore will fail idempotence.
- name: Enable AWS CloudWatch Agent
  service:
    name: amazon-cloudwatch-agent
    enabled: yes

- name: Install rsyslog
  package:
    name:
      - rsyslog
- name: Enable rsyslog
  service:
    name: rsyslog
    enabled: yes

# Configure systemd-journald to forward all journal logs to rsyslog,
# so that the Amazon CloudWatch Agent can in turn forward them to
# CloudWatch.
- name: Forward journald log entries to rsyslog
  lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '{{ item.regex }}'
    line: '{{ item.line }}'
    # This forces lineinfile not to append the line if the regex fails
    # to match
    backrefs: yes
  loop:
    - {regex: '^#?ForwardToSyslog', line: "ForwardToSyslog=yes"}
    - {regex: '^#?MaxLevelSyslog', line: "MaxLevelSyslog=debug"}
